buildscript {
	ext {
		springBootVersion = '2.0.0.M3'
	}
	repositories {
		mavenCentral()
		maven { url 'https://repo.spring.io/snapshot' }
		maven { url 'https://repo.spring.io/milestone' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-RC3'
	}
}

plugins {
    id 'com.intershop.gradle.jaxb' version '2.0.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'

group = 'org.unicodetool'
version = '1.0.0'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-devtools')
	compile('org.springframework.boot:spring-boot-starter-tomcat')

	compile('org.springframework:spring-oxm:4.2.4.RELEASE')

	compile('com.graphql-java:graphiql-spring-boot-starter:3.1.1')
	compile('com.graphql-java:graphql-spring-boot-starter:3.1.1')
	compile('com.graphql-java:graphql-java-tools:2.2.0')

	compileOnly('org.projectlombok:lombok')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.junit.jupiter:junit-jupiter-api:5.0.1')
	testCompile('org.junit.jupiter:junit-jupiter-params:5.0.1')
	testRuntime('org.junit.jupiter:junit-jupiter-engine:5.0.1')
}

// Run end to end tests
task endToEndTest {
	doFirst {
		if (!project.hasProperty("deploymentUrl")) {
			throw new InvalidUserDataException("Deployment url not given. Aborting.")
		}
		println "Waiting for ${deploymentUrl} ..."
        def count = 0
		while (!doHead(deploymentUrl) && count < 120) {
			sleep(1000)
			++count
		}
		if (count == 120) {
			throw new GradleException("Deployment is not up after 120 seconds. aborting.")
		}
		println "${deploymentUrl} is up!"
	}
	doLast {
		if (!project.hasProperty("deploymentUrl")) {
			throw new InvalidUserDataException("Deployment url not given. Aborting.")
		}
		println "Running end to end tests on deployment ${deploymentUrl}"
	}
}

boolean doHead(String url) {
	def connection = new URL(url).openConnection()
	connection.requestMethod = 'HEAD'
	try {
		connection.responseCode == 200
	} catch (IOException error) {
		false
	}
}


// Configure the JAXB classes og the unicode character database xml schema
jaxb {
    javaGen {
        posConfig {
            packageName = 'org.unicodetool.ucd.schema'
            schema = file('src/main/resources/ucd/schema.xsd')
        }
    }
}